import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import random
from PIL import Image, ImageTk

class DiceRollerApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Dice Roller")
        self.dice_rolls = []
        self.history_window = None  # Add history_window attribute and initialize it to None
        self.show_main_window()

    def show_main_window(self):
        self.main_window = MainWindow(self)

    def show_history_window(self):
        if self.history_window is None:  # Check if history_window is None
            self.history_window = HistoryWindow(self)

class MainWindow:
    def __init__(self, app):
        self.app = app
        self.master = app.master

        self.homepage_image = Image.open("homepagedice.jpg")
        self.homepage_image = self.homepage_image.resize((200, 200), Image.LANCZOS)
        self.homepage_photo = ImageTk.PhotoImage(self.homepage_image)
        self.label_image = ttk.Label(self.master, image=self.homepage_photo)
        self.label_image.grid(row=0, column=0, columnspan=4)

        self.label_dice = ttk.Label(self.master, text="Select Dice:")
        self.combobox_dice = ttk.Combobox(self.master, values=["D4", "D6", "D8", "D10", "D12", "D20", "D100"])
        self.label_modifier = ttk.Label(self.master, text="Modifier:")
        self.entry_modifier = ttk.Entry(self.master)
        self.label_amount = ttk.Label(self.master, text="Amount:")
        self.entry_amount = ttk.Entry(self.master)
        self.button_roll = ttk.Button(self.master, text="Roll", command=self.roll_dice)
        self.button_history = ttk.Button(self.master, text="History", command=self.show_history_window)

        self.label_dice.grid(row=1, column=0, padx=5, pady=5)
        self.combobox_dice.grid(row=1, column=1, padx=5, pady=5)
        self.label_modifier.grid(row=1, column=2, padx=5, pady=5)
        self.entry_modifier.grid(row=1, column=3, padx=5, pady=5)
        self.label_amount.grid(row=2, column=0, padx=5, pady=5)
        self.entry_amount.grid(row=2, column=1, padx=5, pady=5)
        self.button_roll.grid(row=2, column=2, padx=5, pady=5)
        self.button_history.grid(row=2, column=3, padx=5, pady=5)

    def roll_dice(self):
        dice_type = self.combobox_dice.get()
        modifier = self.entry_modifier.get()
        amount = self.entry_amount.get()

        if not dice_type or not modifier.isdigit() or not amount.isdigit():
            messagebox.showerror("Error", "Invalid input. Modifier and amount must be positive integers.")
            return

        modifier = int(modifier)
        amount = int(amount)

        try:
            modifier = int(modifier)
        except ValueError:
            messagebox.showerror("Error", "Invalid modifier input. Please enter an integer.")
            return

        if amount <= 0:
            messagebox.showerror("Error", "Invalid input. Amount must be positive.")
            return

        dice_values = {"D4": [1, 2, 3, 4], "D6": [1, 2, 3, 4, 5, 6], "D8": [1, 2, 3, 4, 5, 6, 7, 8],
                       "D10": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "D12": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
                       "D20": [i for i in range(1, 21)], "D100": [i for i in range(1, 101)]}

        rolls = [random.choice(dice_values[dice_type]) for _ in range(amount)]
        total = sum(rolls) + modifier

        self.app.dice_rolls.append((dice_type, rolls, modifier, total))

        result_text = f"{dice_type}: Rolls: {rolls}, Modifier: {modifier}, Total: {total}"
        if self.app.history_window:
            self.app.history_window.add_roll_result(result_text)

    def show_history_window(self):
        self.app.show_history_window()

class HistoryWindow:
    def __init__(self, app):
        self.app = app
        self.master = tk.Toplevel(app.master)
        self.master.title("Roll History")

        self.label_history = ttk.Label(self.master, text="Roll History")
        self.label_history.grid(row=0, column=0, columnspan=2, pady=5)

        self.button_back = ttk.Button(self.master, text="Back", command=self.close_window)
        self.button_back.grid(row=2, column=0, columnspan=2, pady=5)

    def add_roll_result(self, result_text):
        label_roll = ttk.Label(self.master, text=result_text)
        label_roll.grid(row=len(self.app.dice_rolls) + 3, column=0, columnspan=2)

    def close_window(self):
        self.master.destroy()

def main():
    root = tk.Tk()
    app = DiceRollerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
